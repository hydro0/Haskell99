
==================== FINAL INTERFACE ====================
2017-10-29 11:02:57.886312 UTC

interface main@main:Main 8002
  interface hash: 038424aa1be2634d8674d479312234c0
  ABI hash: 362e4752c202efdfe23c3e2d90a3300c
  export-list hash: 924bafa859f51e361ab3ad790cfc28ec
  orphan hash: 0f4f22d1952e785d302471a6922a24cd
  flag hash: 8c004973c479508f078a0ca0e4fd2f67
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.combination
  Main.combinations
  Main.compress
  Main.decode_mod
  Main.dropEvery
  Main.dupl
  Main.elementAt
  Main.encode
  Main.encode_mod
  Main.group
  Main.insertAt
  Main.isPalindrome
  Main.main
  Main.myButLast
  Main.myFlatten
  Main.myLast
  Main.myLength
  Main.myReverse
  Main.pack
  Main.range
  Main.remove
  Main.repli
  Main.rndElem
  Main.rndPermutation
  Main.rnd_select
  Main.rnd_select_i
  Main.rotate
  Main.someFunc
  Main.split
  Main.Ext{Main.Multiple Main.Single}
  Main.NestedList{Main.Elem Main.List}
module dependencies:
package dependencies: array-0.5.1.1@array-0.5.1.1 base-4.9.1.0*
                      deepseq-1.4.2.0@deepseq-1.4.2.0 ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1 random-1.1@random-1.1-9tceXaeYIMZ4JrKq20Egog*
                      time-1.6.0.1@time-1.6.0.1
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         time-1.6.0.1@time-1.6.0.1:Data.Time.Calendar.Gregorian
         time-1.6.0.1@time-1.6.0.1:Data.Time.Format.Parse
         time-1.6.0.1@time-1.6.0.1:Data.Time.LocalTime.LocalTime
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Complex base-4.9.1.0:Data.Either
                         base-4.9.1.0:Data.Functor.Const base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
import  -/  base-4.9.1.0:Data.Foldable 3e0b6967a1da89945d0e2d47266337a2
import  -/  base-4.9.1.0:Data.List 07ae2acca6538aa0800bd0a993ac6ac1
import  -/  base-4.9.1.0:Data.OldList 27987919d8da2f92e3f472ca81f730f8
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.Err 3bba35a16538d33d424682ce66876cdd
import  -/  base-4.9.1.0:GHC.List ab8c4e523e6c479c549d3bcd5fc4a439
import  -/  base-4.9.1.0:GHC.Num 00bfaa7b2f9d6084913c0697a8a49ec8
import  -/  base-4.9.1.0:GHC.Show a027f5ac24879eaba752f44aa90fe511
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  base-4.9.1.0:System.IO c9de64c5f5407c4cf1c52500c4d15200
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  ghc-prim-0.5.0.0:GHC.Types 89f8de4f08018c9177c98d979eae0e45
import  -/  random-1.1@random-1.1-9tceXaeYIMZ4JrKq20Egog:System.Random cc3ef358c669b194cf9fe94db6f2430f
ab9bedec3aa6c3816fa804df64e61e58
  $fShowExt :: GHC.Show.Show a => GHC.Show.Show (Main.Ext a)
  DFunId
  {- Arity: 1, Strictness: <L,U(C(C1(U)),A,A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a ($dShow :: GHC.Show.Show a).
                  @ (Main.Ext a)
                  (Main.$fShowExt_$cshowsPrec @ a $dShow)
                  (Main.$fShowExt_$cshow @ a $dShow)
                  (Main.$fShowExt_$cshowList @ a $dShow) -}
2476adad0b1c4ca95f50e889a3e75d39
  $fShowExt1 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
4ee1e102415f33fbd98f807e08327ef5
  $fShowExt2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Single "#) -}
924d954f7dd68f580e31f2c357b11061
  $fShowExt3 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 11#) -}
7a75e4b0b97ceb2ca85b620dc572bc43
  $fShowExt4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Multiple "#) -}
83d6bcd1abf4df24a647bba00caea196
  $fShowExt5 :: [GHC.Types.Char]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   GHC.Show.shows4
                   (GHC.Types.[] @ GHC.Types.Char)) -}
ab9bedec3aa6c3816fa804df64e61e58
  $fShowExt_$cshow ::
    GHC.Show.Show a => Main.Ext a -> GHC.Base.String
  {- Arity: 2, Strictness: <L,1*U(1*C1(C1(U)),A,A)><S,1*U>,
     Unfolding: (\ @ a ($dShow :: GHC.Show.Show a) (x :: Main.Ext a) ->
                 case x of wild {
                   Main.Multiple b1
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Main.$fShowExt4
                        (case b1 of ww { (,) ww1 ww2 ->
                         GHC.Types.:
                           @ GHC.Types.Char
                           GHC.Show.shows7
                           (case ww1 of ww4 { GHC.Types.I# ww3 ->
                            case GHC.Show.$wshowSignedInt
                                   0#
                                   ww3
                                   (GHC.Types.:
                                      @ GHC.Types.Char
                                      GHC.Show.shows5
                                      (GHC.Show.$fShow(,)_$sgo
                                         Main.$fShowExt5
                                         (GHC.Show.showsPrec @ a $dShow GHC.Show.shows22 ww2)
                                         (GHC.Types.[] @ GHC.Show.ShowS))) of ww5 { (#,#) ww6 ww7 ->
                            GHC.Types.: @ GHC.Types.Char ww6 ww7 } }) })
                   Main.Single b1
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Main.$fShowExt2
                        (GHC.Show.showsPrec
                           @ a
                           $dShow
                           Main.$fShowExt3
                           b1
                           (GHC.Types.[] @ GHC.Types.Char)) }) -}
ab9bedec3aa6c3816fa804df64e61e58
  $fShowExt_$cshowList ::
    GHC.Show.Show a => [Main.Ext a] -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(C(C1(U)),A,A)><S,1*U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   ($dShow :: GHC.Show.Show a)
                   (eta :: [Main.Ext a])
                   (eta1 :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Main.Ext a)
                   (Main.$fShowExt_$cshowsPrec @ a $dShow Main.$fShowExt1)
                   eta
                   eta1) -}
ab9bedec3aa6c3816fa804df64e61e58
  $fShowExt_$cshowsPrec ::
    GHC.Show.Show a => GHC.Types.Int -> Main.Ext a -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(C(C1(U)),A,A)><S(S),1*U(U)><S,1*U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   (w :: GHC.Show.Show a)
                   (w1 :: GHC.Types.Int)
                   (w2 :: Main.Ext a) ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 Main.$w$cshowsPrec @ a w ww1 w2 }) -}
b35c04b1e526224a3971e92cff3509e4
  $s$fShow[]_$s$fShow[]_$cshowList1 ::
    [[GHC.Integer.Type.Integer]] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (eta :: [[GHC.Integer.Type.Integer]])
                   (eta1 :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ [GHC.Integer.Type.Integer]
                   GHC.Show.$fShowInteger_$cshowList
                   eta
                   eta1) -}
d63c6e902678bee5b36d56ff4bfddfe2
  $tc'Elem :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17327168035761514749##
                   2325504556886121138##
                   Main.$trModule
                   Main.$tc'Elem1) -}
3c11f571b1c04145eaa95a536e147b32
  $tc'Elem1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Elem"#) -}
46522d52751dc50649257d119071f56c
  $tc'List :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17414508030287696193##
                   1475919201417240795##
                   Main.$trModule
                   Main.$tc'List1) -}
5cd3b142e25354d03ec7218b9a7bf692
  $tc'List1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'List"#) -}
17804e81547f7c90602f2c896e1ce6c3
  $tc'Multiple :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4657229928005733577##
                   1981937757250795924##
                   Main.$trModule
                   Main.$tc'Multiple1) -}
b78c42c8b5103bb106d3e57546fb067b
  $tc'Multiple1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Multiple"#) -}
27878eafe3fb39da72746fbf7268a518
  $tc'Single :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   757164489821052818##
                   13788531866546215356##
                   Main.$trModule
                   Main.$tc'Single1) -}
339c99460c9f65284efceeab557be636
  $tc'Single1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Single"#) -}
36baf676acfd0b41ee8246c20bff7012
  $tcExt :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6441824245102875745##
                   5469355464743097422##
                   Main.$trModule
                   Main.$tcExt1) -}
fde159b88ed2b328151aeda1e117aa6a
  $tcExt1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Ext"#) -}
2cab99f781d3a103295f1513dfbba504
  $tcNestedList :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9067267851135806687##
                   10246202200427909738##
                   Main.$trModule
                   Main.$tcNestedList1) -}
b00d8499870a8efe51b16603ed6ecd91
  $tcNestedList1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "NestedList"#) -}
d6831ef04cb9301b090dfae6f7bb7ec7
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule2 Main.$trModule1) -}
847d9fc3b8e6f0b424199f36b4999bb2
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Main"#) -}
24ef6042833e75ffd7aa98b83ecca98d
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "main"#) -}
ab9bedec3aa6c3816fa804df64e61e58
  $w$cshowsPrec ::
    GHC.Show.Show a => GHC.Prim.Int# -> Main.Ext a -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(C(C1(U)),A,A)><S,U><S,1*U>,
     Inline: [0],
     Unfolding: (\ @ a
                   (w :: GHC.Show.Show a)
                   (ww :: GHC.Prim.Int#)
                   (w1 :: Main.Ext a) ->
                 case w1 of wild {
                   Main.Multiple b1
                   -> let {
                        p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                        = \ (x :: GHC.Base.String) ->
                          GHC.Base.++
                            @ GHC.Types.Char
                            Main.$fShowExt4
                            (case b1 of ww1 { (,) ww2 ww3 ->
                             GHC.Types.:
                               @ GHC.Types.Char
                               GHC.Show.shows7
                               (case ww2 of ww4 { GHC.Types.I# ww5 ->
                                case GHC.Show.$wshowSignedInt
                                       0#
                                       ww5
                                       (GHC.Types.:
                                          @ GHC.Types.Char
                                          GHC.Show.shows5
                                          (GHC.Show.$fShow(,)_$sgo
                                             (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 x)
                                             (GHC.Show.showsPrec @ a w GHC.Show.shows22 ww3)
                                             (GHC.Types.[]
                                                @ GHC.Show.ShowS))) of ww6 { (#,#) ww7 ww8 ->
                                GHC.Types.: @ GHC.Types.Char ww7 ww8 } }) })
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# ww 11#) of wild1 {
                        GHC.Types.False -> p
                        GHC.Types.True
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows7
                             (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 x)) }
                   Main.Single b1
                   -> let {
                        g :: GHC.Base.String -> GHC.Base.String
                        = GHC.Show.showsPrec @ a w Main.$fShowExt3 b1
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# ww 11#) of wild1 {
                        GHC.Types.False
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Base.++ @ GHC.Types.Char Main.$fShowExt2 (g x)
                        GHC.Types.True
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows7
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Main.$fShowExt2
                                (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 x))) } }) -}
5560386c42c77abcff20f58ff7e4b330
  $wcombination :: GHC.Prim.Int# -> [a] -> [([a], [a])]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><L,U>, Inline: [0] -}
d95f4734ebea8afed387b3a2d5fc0984
  $welementAt :: [a] -> GHC.Prim.Int# -> a
  {- Arity: 2, Strictness: <S,1*U><S,1*U>, Inline: [0] -}
3d5a558083ae6ad799190c5244b4213d
  $winsertAt :: a -> [a] -> GHC.Prim.Int# -> (# a, [a] #)
  {- Arity: 3, Strictness: <L,U><L,U><S,1*U>, Inline: [0] -}
1c3d3f59988852fd6667248d18095a6a
  $wmyLength :: [a] -> GHC.Prim.Int#
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>, Inline: [0] -}
d45dbd5790548c398051d2da6fdd0839
  $wpoly_helper :: [a] -> GHC.Types.Int -> (# [a], [a] #)
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U(U)>,
     Inline: [0] -}
84643437b69953677bf8766a36cbf547
  $wrange ::
    GHC.Prim.Int#
    -> GHC.Prim.Int# -> (# GHC.Types.Int, [GHC.Types.Int] #)
  {- Arity: 2, Strictness: <S,U><S,U>, Inline: [0] -}
d6faf55e55ed67cd38e207a37c90075f
  $wremove :: [a] -> GHC.Types.Int -> (# GHC.Base.Maybe a, [a] #)
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U(1*U)>,
     Inline: [0] -}
ab9bedec3aa6c3816fa804df64e61e58
  data Ext a = Multiple (GHC.Types.Int, a) | Single a
3c2dafe73f215d790e902b1f4228cf87
  data NestedList a = Elem a | List [Main.NestedList a]
9817812880b907c732508777d0386969
  combination :: GHC.Types.Int -> [a] -> [([a], [a])]
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ @ a (w :: GHC.Types.Int) (w1 :: [a]) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Main.$wcombination @ a ww1 w1 }) -}
65751f7e039387692c15914115af56ef
  combinations :: GHC.Types.Int -> [a] -> [[a]]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U(U)><L,1*U>,
     Unfolding: (\ @ a (n :: GHC.Types.Int) (xs :: [a]) ->
                 GHC.List.filter
                   @ [a]
                   (\ (x :: [a]) ->
                    case GHC.List.$wlenAcc @ a x 0# of ww2 { DEFAULT ->
                    case n of wild1 { GHC.Types.I# y ->
                    GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.==# ww2 y) } })
                   (GHC.Types.:
                      @ [a]
                      (GHC.Types.[] @ a)
                      (Data.OldList.nonEmptySubsequences @ a xs))) -}
6a17a30c8e83c1dac0add572c3e41199
  compress :: GHC.Classes.Eq a => [a] -> [a]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)><S,1*U> -}
1f153303bf114efd9f28f14b296564b2
  decode_mod :: [Main.Ext a] -> [a]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: (\ @ a (xs :: [Main.Ext a]) ->
                 Main.decode_mod1 @ a xs) -}
7cab509f03a0fccdac86c8b26664e54e
  decode_mod1 :: [Main.Ext a] -> [a]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
46c5d70f0ef28faf9d95d6d1f2293167
  dropEvery :: [a] -> GHC.Types.Int -> [a]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U(U)>,
     Unfolding: (\ @ a (xs :: [a]) (n :: GHC.Types.Int) ->
                 letrec {
                   dropEvery' :: [a] -> GHC.Types.Int -> [a]
                     {- Arity: 2, Strictness: <S,1*U><L,1*U(1*U)> -}
                   = \ (ds :: [a]) (ds1 :: GHC.Types.Int) ->
                     case ds of wild {
                       [] -> GHC.Types.[] @ a
                       : x xs1
                       -> case ds1 of wild1 { GHC.Types.I# ds2 ->
                          case ds2 of ds3 {
                            DEFAULT
                            -> GHC.Types.:
                                 @ a
                                 x
                                 (dropEvery' xs1 (GHC.Types.I# (GHC.Prim.-# ds3 1#)))
                            1# -> dropEvery' xs1 n } } }
                 } in
                 dropEvery' xs n) -}
e09806fa5fa10d1b09040be9610d7dec
  dupl :: [a] -> [a]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
30acf1bb1ef482aa61254db56c1bb56e
  elementAt :: [a] -> GHC.Types.Int -> a
  {- Arity: 2, Strictness: <S,1*U><S(S),1*U(1*U)>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ @ a (w :: [a]) (w1 :: GHC.Types.Int) ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 Main.$welementAt @ a w ww1 }) -}
0e537a6667a4b2492d681561a39ebf17
  encode :: GHC.Classes.Eq a => [a] -> [(GHC.Types.Int, a)]
  {- Arity: 2, Strictness: <L,U(C(C1(U)),A)><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a ($dEq :: GHC.Classes.Eq a) (xs :: [a]) ->
                 GHC.Base.build
                   @ (GHC.Types.Int, a)
                   (\ @ b1
                      (c :: (GHC.Types.Int, a) -> b1 -> b1)[OneShot]
                      (n :: b1)[OneShot] ->
                    GHC.Base.foldr
                      @ [a]
                      @ b1
                      (GHC.Base.mapFB
                         @ (GHC.Types.Int, a)
                         @ b1
                         @ [a]
                         c
                         (Main.encode1 @ a))
                      n
                      (Main.pack @ a $dEq xs))) -}
77ff30713f57f5a38fe5fb8d9e71b13e
  encode1 :: [a] -> (GHC.Types.Int, a)
  {- Arity: 1, Strictness: <L,U>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (xs :: [a]) ->
                 (case GHC.List.$wlenAcc @ a xs 0# of ww2 { DEFAULT ->
                  GHC.Types.I# ww2 },
                  GHC.List.head @ a xs)) -}
ede33f3feb6880e23e5711da96c85805
  encode_mod :: GHC.Classes.Eq a => [a] -> [Main.Ext a]
  {- Arity: 2, Strictness: <L,U(C(C1(U)),A)><S,1*U>,
     Unfolding: (\ @ a ($dEq :: GHC.Classes.Eq a) (xs :: [a]) ->
                 GHC.Base.map
                   @ [a]
                   @ (Main.Ext a)
                   (Main.encode_mod1 @ a)
                   (Main.pack @ a $dEq xs)) -}
ff18cf541bd900bf5eef507ad52fe226
  encode_mod1 :: [a] -> Main.Ext a
  {- Arity: 1,
     Unfolding: (\ @ a (x :: [a]) ->
                 case GHC.List.$wlenAcc @ a x 0# of ww2 {
                   DEFAULT
                   -> Main.Multiple @ a (GHC.Types.I# ww2, GHC.List.head @ a x)
                   1# -> Main.Single @ a (GHC.List.head @ a x) }) -}
a9dc2903a54fc6d775709e06f166ceb2
  group :: [GHC.Types.Int] -> [a] -> [[[a]]]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U> -}
947271d99ee25de1a4a66f45fe8cecf3
  insertAt :: a -> [a] -> GHC.Types.Int -> [a]
  {- Arity: 3, Strictness: <L,U><L,U><S(S),1*U(1*U)>m2,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ @ a (w :: a) (w1 :: [a]) (w2 :: GHC.Types.Int) ->
                 case w2 of ww { GHC.Types.I# ww1 ->
                 case Main.$winsertAt @ a w w1 ww1 of ww2 { (#,#) ww3 ww4 ->
                 GHC.Types.: @ a ww3 ww4 } }) -}
6e28cae4088a54ddb52ed0adf1c00e03
  isPalindrome :: GHC.Classes.Eq a => [a] -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a ($dEq :: GHC.Classes.Eq a) (xs :: [a]) ->
                 GHC.Classes.$fEq[]_$c== @ a $dEq xs (Main.myReverse @ a xs)) -}
7b3cfdda523ae223378437f0a9687781
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
445054c73a567bf416ef2b0e8a834e8d
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 GHC.IO.Handle.Text.hPutStr2
                   GHC.IO.Handle.FD.stdout
                   Main.main2
                   GHC.Types.True
                   s) -}
047c60d2b2402d522bf548ddc1ac0ef1
  main10 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 5#) -}
a42c768d23f0fd5ce160a3e646a61149
  main11 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 2#) -}
6fad5fc1690e0ba98e773018fd3f73f9
  main12 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
10ce36c60e657ae06aeb148eb59e7ed6
  main2 :: GHC.Base.String
  {- Unfolding: (GHC.Show.showList__
                   @ [[GHC.Integer.Type.Integer]]
                   Main.$s$fShow[]_$s$fShow[]_$cshowList1
                   Main.main3
                   (GHC.Types.[] @ GHC.Types.Char)) -}
57ae66e13b79c96973bd8fe06cc332c8
  main3 :: [[[GHC.Integer.Type.Integer]]]
  {- Unfolding: (Main.group
                   @ GHC.Integer.Type.Integer
                   Main.main7
                   Main.main4) -}
470ec4d07bfac18df4fc54f3f0241040
  main4 :: [GHC.Integer.Type.Integer]
  {- Unfolding: (GHC.Enum.enumDeltaToInteger1
                   Main.main6
                   Main.main5) -}
f0e5192f946c39349e91aefceb40d168
  main5 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (9) -}
7c68dbbd1e1849f5803738de601a4aa2
  main6 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (1) -}
2b416d4387d9d1cfb2f519a5cab35bb4
  main7 :: [GHC.Types.Int]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.: @ GHC.Types.Int Main.main11 Main.main8) -}
1259f2d3f2197b8f2b6e011f05250d63
  main8 :: [GHC.Types.Int]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.: @ GHC.Types.Int Main.main11 Main.main9) -}
0bdd0b5a5f0be895dca1be10285ea143
  main9 :: [GHC.Types.Int]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Int
                   Main.main10
                   (GHC.Types.[] @ GHC.Types.Int)) -}
7ba5e59071a117c47c3e848e8306ace5
  myButLast :: [a] -> a
  {- Arity: 1, Strictness: <S,1*U> -}
0dc6c3691f19479cf76f1b796bac2010
  myFlatten :: Main.NestedList a -> [a]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
11427b5c7e3af43c1354fc3830337e12
  myLast :: [a] -> a
  {- Arity: 1, Strictness: <S,1*U> -}
7da0798bb732250fd40215bc26a9525e
  myLength :: [a] -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ @ a (w :: [a]) ->
                 case Main.$wmyLength @ a w of ww { DEFAULT -> GHC.Types.I# ww }) -}
001c2ba98862c1774ac0b58cd05b4b16
  myReverse :: [a] -> [a]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
0fdb9477df3e80c56d04e0405094bc28
  pack :: GHC.Classes.Eq a => [a] -> [[a]]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)><S,1*U> -}
0489309f3ae3259d19c86dcc7323bef6
  range :: GHC.Types.Int -> GHC.Types.Int -> [GHC.Types.Int]
  {- Arity: 2, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m2,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: GHC.Types.Int) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { GHC.Types.I# ww3 ->
                 case Main.$wrange ww1 ww3 of ww4 { (#,#) ww5 ww6 ->
                 GHC.Types.: @ GHC.Types.Int ww5 ww6 } } }) -}
55c6e8d7a7d4dae3a16e19a4dbadf13b
  remove :: [a] -> GHC.Types.Int -> (GHC.Base.Maybe a, [a])
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U(1*U)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ @ a (w :: [a]) (w1 :: GHC.Types.Int) ->
                 case Main.$wremove @ a w w1 of ww { (#,#) ww1 ww2 ->
                 (ww1, ww2) }) -}
0f22cf7b7bfbe4f363e338694002b73d
  repli :: GHC.Types.Int -> [a] -> [a]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U(U)><S,1*U>,
     Unfolding: (\ @ a (c :: GHC.Types.Int) (xs :: [a]) ->
                 letrec {
                   go :: [a] -> [a] {- Arity: 1, Strictness: <S,1*U> -}
                   = \ (ds :: [a]) ->
                     case ds of wild {
                       [] -> GHC.Types.[] @ a
                       : y ys
                       -> case c of wild1 { GHC.Types.I# y1 ->
                          case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.<# 0# y1) of wild2 {
                            GHC.Types.False -> GHC.Base.++ @ a (GHC.Types.[] @ a) (go ys)
                            GHC.Types.True
                            -> let {
                                 lvl31 :: [a] = GHC.Types.: @ a y (GHC.Types.[] @ a)
                               } in
                               letrec {
                                 $wxs :: GHC.Prim.Int# -> [a]
                                   {- Arity: 1, Strictness: <S,1*U>, Inline: [0] -}
                                 = \ (ww :: GHC.Prim.Int#) ->
                                   case ww of ds1 {
                                     DEFAULT -> GHC.Types.: @ a y ($wxs (GHC.Prim.-# ds1 1#))
                                     1# -> lvl31 }
                               } in
                               GHC.Base.++ @ a ($wxs y1) (go ys) } } }
                 } in
                 go xs) -}
856c5f301a4691c7c12f49be58bd8010
  rndElem :: [a] -> GHC.Types.IO a
  {- Arity: 2, Strictness: <L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.rndElem1
                  `cast`
                (forall (a :: <*>_N).
                 <[a]>_R ->_R Sym (GHC.Types.N:IO[0] <a>_R)) -}
0c427ed46525430260c76e5b90fc0292
  rndElem1 ::
    [a]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
  {- Arity: 2, Strictness: <L,U><S,U>,
     Unfolding: (\ @ a
                   (xs :: [a])
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case System.Random.$fRandomInt3
                        (Main.$fShowExt1,
                         case GHC.List.$wlenAcc @ a xs 0# of ww2 { DEFAULT ->
                         GHC.Types.I# (GHC.Prim.-# ww2 1#) })
                        s of ds1 { (#,#) ipv ipv1 ->
                 (# ipv, GHC.List.!! @ a xs ipv1 #) }) -}
6c11d31fce0bcc5d1f8bd23d52e41def
  rndPermutation :: [a] -> GHC.Types.IO [a]
  {- Arity: 2, Strictness: <L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.rndPermutation1
                  `cast`
                (forall (a :: <*>_N).
                 <[a]>_R ->_R Sym (GHC.Types.N:IO[0] <[a]>_R)) -}
0026e38c648c54596719abe6d0c3f9f2
  rndPermutation1 ::
    [a]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [a] #)
  {- Arity: 2, Strictness: <L,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   (x :: [a])
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 Main.rndElem1 @ [a] (Data.OldList.permutations @ a x) eta) -}
434cd8727db9fb06dc0746b80a313b4a
  rnd_select :: [a] -> GHC.Types.Int -> GHC.Types.IO [a]
  {- Arity: 3, Strictness: <L,U><L,1*U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.rnd_select1
                  `cast`
                (forall (a :: <*>_N).
                 <[a]>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (GHC.Types.N:IO[0] <[a]>_R)) -}
cacdb36d92fa75597b316f87d0f84ce7
  rnd_select1 ::
    [a]
    -> GHC.Types.Int
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [a] #)
  {- Arity: 3, Strictness: <L,U><L,1*U(U)><S,U>,
     Unfolding: (\ @ a
                   (xs :: [a])
                   (n :: GHC.Types.Int)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case System.Random.theStdGen
                        `cast`
                      (GHC.IORef.N:IORef[0] <System.Random.StdGen>_N) of wild { GHC.STRef.STRef var# ->
                 case GHC.Prim.readMutVar#
                        @ GHC.Prim.RealWorld
                        @ System.Random.StdGen
                        var#
                        eta of ds1 { (#,#) ipv ipv1 ->
                 (# ipv,
                    case n of wild1 { GHC.Types.I# y ->
                    case GHC.Prim.tagToEnum#
                           @ GHC.Types.Bool
                           (GHC.Prim.<# 0# y) of wild2 {
                      GHC.Types.False -> GHC.Types.[] @ a
                      GHC.Types.True
                      -> case GHC.List.$wlenAcc @ a xs 0# of ww2 { DEFAULT ->
                         let {
                           w1 :: GHC.Integer.Type.Integer
                           = GHC.Integer.Type.smallInteger (GHC.Prim.-# ww2 1#)
                         } in
                         letrec {
                           $wgo :: System.Random.StdGen -> GHC.Prim.Int# -> [a]
                             {- Arity: 2, Strictness: <L,U><S,1*U>, Inline: [0] -}
                           = \ (w :: System.Random.StdGen) (ww :: GHC.Prim.Int#) ->
                             case System.Random.$wrandomIvalInteger
                                    @ System.Random.StdGen
                                    @ GHC.Types.Int
                                    System.Random.$fRandomGenStdGen
                                    GHC.Num.$fNumInt
                                    Main.rnd_select_w2
                                    w1
                                    w of ww1 { (#,#) ww3 ww4 ->
                             case ww3 of x1 { GHC.Types.I# ipv2 ->
                             case ww of ds2 {
                               DEFAULT
                               -> GHC.Types.:
                                    @ a
                                    (GHC.List.$w!! @ a xs ipv2)
                                    ($wgo ww4 (GHC.Prim.-# ds2 1#))
                               1#
                               -> GHC.Types.:
                                    @ a
                                    (GHC.List.$w!! @ a xs ipv2)
                                    (GHC.Types.[] @ a) } } }
                         } in
                         $wgo ipv1 y } } } #) } }) -}
df280aa552dd8af3f37f53b5620b1c70
  rnd_select_i ::
    GHC.Types.Int -> GHC.Types.Int -> GHC.Types.IO [GHC.Types.Int]
  {- Arity: 2, Strictness: <L,U(U)><L,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                Main.rnd_select_i1
                  `cast`
                (<GHC.Types.Int>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (GHC.Types.N:IO[0] <[GHC.Types.Int]>_R)) -}
c0029f6bea2e182ff6b63c56c098350a
  rnd_select_i1 ::
    GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Int] #)
  {- Arity: 2, Strictness: <L,U(U)><L,1*U(U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (n :: GHC.Types.Int) (m :: GHC.Types.Int) ->
                 Main.rnd_select1
                   @ GHC.Types.Int
                   (case m of wild1 { GHC.Types.I# y ->
                    GHC.Base.build
                      @ GHC.Types.Int
                      (\ @ b
                         (c :: GHC.Types.Int -> b -> b)[OneShot]
                         (n1 :: b)[OneShot] ->
                       GHC.Enum.eftIntFB @ b c n1 1# y) })
                   n) -}
f0896e72c55f887ef317bd9b4c95514f
  rnd_select_w2 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (0) -}
54155181dd8b218fbffbb999ee025539
  rotate :: [a] -> GHC.Types.Int -> [a]
  {- Arity: 2, Strictness: <S,1*U><L,1*U(1*U)> -}
a7152162d6da95fb69eb65ac52ce34f6
  someFunc :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
74f5e4996bc735232a2cd3192fe1f276
  split :: [a] -> GHC.Types.Int -> ([a], [a])
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U(U)>m,
     Unfolding: InlineRule (2, True, True) Main.split1 -}
157e09dd1edc0edb57e91e0faf73725e
  split1 :: [a] -> GHC.Types.Int -> ([a], [a])
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U(U)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ @ a (w :: [a]) (w1 :: GHC.Types.Int) ->
                 case Main.$wpoly_helper @ a w w1 of ww { (#,#) ww1 ww2 ->
                 (ww1, ww2) }) -}
instance [safe] GHC.Show.Show [Main.Ext] = Main.$fShowExt
"SPEC/Main $fShow[]_$cshowList @ Integer" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                                       GHC.Integer.Type.Integer)
  GHC.Show.$fShow[]_$cshowList @ GHC.Integer.Type.Integer $dShow
  = Main.$s$fShow[]_$s$fShow[]_$cshowList1
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

