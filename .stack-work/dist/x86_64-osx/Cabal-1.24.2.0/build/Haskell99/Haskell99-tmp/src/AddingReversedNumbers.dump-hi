
==================== FINAL INTERFACE ====================
2017-12-24 17:34:56.661837 UTC

interface main@main:AddingReversedNumbers 8002
  interface hash: c2e4fe4f26093f962b78f66789a09573
  ABI hash: 6137c02bc657151b1f26a01446e78505
  export-list hash: 87b8b0729bac3cac902761686177259a
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: e8391dde344b558bbf052293f5ecc872
  sig of: Nothing
  used TH splices: False
  where
exports:
  AddingReversedNumbers.solve
module dependencies:
package dependencies: base-4.9.1.0* ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Either base-4.9.1.0:Data.Functor.Const
                         base-4.9.1.0:Data.Monoid base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:GHC.Generics base-4.9.1.0:GHC.IO.Exception
                         base-4.9.1.0:GHC.TypeLits
import  -/  base-4.9.1.0:Data.Functor 5ab1dc703df5b482e77efb697833ca3c
import  -/  base-4.9.1.0:Data.OldList 27987919d8da2f92e3f472ca81f730f8
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.List ab8c4e523e6c479c549d3bcd5fc4a439
import  -/  base-4.9.1.0:GHC.Num 00bfaa7b2f9d6084913c0697a8a49ec8
import  -/  base-4.9.1.0:GHC.Real 82e4e59051a13dba1da63e1e970a69e6
import  -/  base-4.9.1.0:GHC.Show a027f5ac24879eaba752f44aa90fe511
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  base-4.9.1.0:Text.Read 75c59863e882ebaec4532e9465e2ee9b
9bc83f3ca587467f2ae3756281397007
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   AddingReversedNumbers.$trModule2
                   AddingReversedNumbers.$trModule1) -}
5877ce1a2953579308157f3bee8ea83d
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "AddingReversedNumbers"#) -}
31f8bcf3ad798da277504b4dfdbe99ca
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "main"#) -}
7086eaf1d8b166a30dd41a7dca3b3056
  $wgo :: GHC.Prim.Int# -> GHC.Prim.Int# -> GHC.Prim.Int#
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U>, Inline: [0] -}
59cfe5746070936f915afc326b8a45f0
  $wsolve ::
    GHC.Base.String -> (# GHC.Types.Char, [GHC.Types.Char] #)
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0],
     Unfolding: (\ (w :: GHC.Base.String) ->
                 case Data.OldList.wordsFB
                        @ [GHC.Types.Int]
                        AddingReversedNumbers.solve2
                        (GHC.Types.[] @ GHC.Types.Int)
                        w of wild {
                   []
                   -> case AddingReversedNumbers.solve1
                      ret_ty (# GHC.Types.Char, [GHC.Types.Char] #)
                      of {}
                   : a ds
                   -> case ds of wild1 {
                        []
                        -> case AddingReversedNumbers.solve1
                           ret_ty (# GHC.Types.Char, [GHC.Types.Char] #)
                           of {}
                        : b ds1
                        -> case a of wild2 { GHC.Types.I# x ->
                           case b of wild3 { GHC.Types.I# y ->
                           case AddingReversedNumbers.$wgo
                                  0#
                                  (GHC.Prim.+# x y) of ww { DEFAULT ->
                           GHC.Show.$wshowSignedInt
                             0#
                             ww
                             (GHC.Types.[] @ GHC.Types.Char) } } } } }) -}
4bfb75b5f4a8eebb556efd34415f33b9
  solve :: GHC.Base.String -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>m2, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: GHC.Base.String) ->
                 case AddingReversedNumbers.$wsolve w of ww { (#,#) ww1 ww2 ->
                 GHC.Types.: @ GHC.Types.Char ww1 ww2 }) -}
dbcb402cc1629649c87f562965201704
  solve1 :: (GHC.Types.Int, GHC.Types.Int)
  {- Strictness: x -}
ca9ef3afceff883fa7de4027db731fde
  solve2 :: [GHC.Types.Char] -> [GHC.Types.Int] -> [GHC.Types.Int]
  {- Arity: 2,
     Unfolding: (\ (x :: [GHC.Types.Char])
                   (ys :: [GHC.Types.Int])[OneShot] ->
                 GHC.Types.:
                   @ GHC.Types.Int
                   (case Text.Read.readEither6
                           @ GHC.Types.Int
                           (Text.ParserCombinators.ReadP.run
                              @ GHC.Types.Int
                              AddingReversedNumbers.solve5
                              (GHC.List.reverse1
                                 @ GHC.Types.Char
                                 x
                                 (GHC.Types.[] @ GHC.Types.Char))) of wild {
                      [] -> AddingReversedNumbers.solve4
                      : x1 ds
                      -> case ds of wild1 {
                           [] -> x1 : ipv ipv1 -> AddingReversedNumbers.solve3 } })
                   ys) -}
9bcf76cd32e23c64db8a7c7171614ce0
  solve3 :: GHC.Types.Int
  {- Strictness: x -}
bdd423e981bae2e47ed8582c1824f3c7
  solve4 :: GHC.Types.Int
  {- Strictness: x -}
0627b655033307cb320d4db8f995b0b7
  solve5 :: Text.ParserCombinators.ReadP.P GHC.Types.Int
  {- Unfolding: (GHC.Read.$fReadInt3
                   GHC.Read.$fReadInt_$sconvertInt
                   Text.ParserCombinators.ReadPrec.minPrec
                   @ GHC.Types.Int
                   (Text.Read.readEither5 @ GHC.Types.Int)) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

