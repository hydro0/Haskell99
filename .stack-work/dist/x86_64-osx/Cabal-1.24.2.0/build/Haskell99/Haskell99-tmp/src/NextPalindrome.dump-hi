
==================== FINAL INTERFACE ====================
2017-12-24 17:22:40.87876 UTC

interface main@main:NextPalindrome 8002
  interface hash: 2a14711969af059b110a8872af3391c7
  ABI hash: 027f9af3f348631aea683d339e5d56be
  export-list hash: 461f94576370408b1c23d13f5e612a2c
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: e8391dde344b558bbf052293f5ecc872
  sig of: Nothing
  used TH splices: False
  where
exports:
  NextPalindrome.solve
module dependencies:
package dependencies: base-4.9.1.0* ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Either base-4.9.1.0:Data.Functor.Const
                         base-4.9.1.0:Data.Monoid base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:GHC.Generics base-4.9.1.0:GHC.IO.Exception
                         base-4.9.1.0:GHC.TypeLits
import  -/  base-4.9.1.0:Data.Foldable 3e0b6967a1da89945d0e2d47266337a2
import  -/  base-4.9.1.0:Data.List 07ae2acca6538aa0800bd0a993ac6ac1
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.Num 00bfaa7b2f9d6084913c0697a8a49ec8
import  -/  base-4.9.1.0:GHC.Real 82e4e59051a13dba1da63e1e970a69e6
import  -/  base-4.9.1.0:GHC.Show a027f5ac24879eaba752f44aa90fe511
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  base-4.9.1.0:Text.Read 75c59863e882ebaec4532e9465e2ee9b
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
cfe2e99db6f72125325f0f9512960b16
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   NextPalindrome.$trModule2
                   NextPalindrome.$trModule1) -}
2fd6285a7c8ddbc086c723e8d68fa61a
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "NextPalindrome"#) -}
401eb18deee834560c0faabde7a28734
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "main"#) -}
ea79bb6f353737d389daa8b0ac47e121
  $wsolve ::
    GHC.Base.String -> (# GHC.Types.Char, [GHC.Types.Char] #)
  {- Arity: 1, Strictness: <L,U>, Inline: [0],
     Unfolding: (\ (w :: GHC.Base.String) ->
                 case Text.Read.readEither6
                        @ GHC.Types.Int
                        (Text.ParserCombinators.ReadP.run
                           @ GHC.Types.Int
                           NextPalindrome.solve4
                           w) of wild {
                   []
                   -> case NextPalindrome.solve3
                      ret_ty (# GHC.Types.Char, [GHC.Types.Char] #)
                      of {}
                   : x ds
                   -> case ds of wild1 {
                        []
                        -> case x of wild2 { GHC.Types.I# x1 ->
                           case (NextPalindrome.solve_go (GHC.Prim.+# x1 1#))
                                  `cast`
                                (Data.Monoid.N:First[0] <GHC.Types.Int>_N) of wild3 {
                             GHC.Base.Nothing
                             -> case NextPalindrome.solve2
                                ret_ty (# GHC.Types.Char, [GHC.Types.Char] #)
                                of {}
                             GHC.Base.Just next
                             -> case next of ww2 { GHC.Types.I# ww3 ->
                                GHC.Show.$wshowSignedInt
                                  0#
                                  ww3
                                  (GHC.Types.[] @ GHC.Types.Char) } } }
                        : ipv ipv1
                        -> case NextPalindrome.solve1
                           ret_ty (# GHC.Types.Char, [GHC.Types.Char] #)
                           of {} } }) -}
24d95642cf8d411e1f619a9a0ad9888b
  solve :: GHC.Base.String -> GHC.Base.String
  {- Arity: 1, Strictness: <L,U>m2, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: GHC.Base.String) ->
                 case NextPalindrome.$wsolve w of ww { (#,#) ww1 ww2 ->
                 GHC.Types.: @ GHC.Types.Char ww1 ww2 }) -}
eff9758c192c32ee2e4b53aed59b7cfa
  solve1 :: GHC.Types.Int
  {- Strictness: x -}
e37afc13a63325874d2cf7b25a87c133
  solve2 :: (GHC.Types.Int)
  {- Strictness: x -}
68a304ebce1442dfc4f0672ec585bda1
  solve3 :: GHC.Types.Int
  {- Strictness: x -}
91010ca55b2e5b15de457da43078799c
  solve4 :: Text.ParserCombinators.ReadP.P GHC.Types.Int
  {- Unfolding: (GHC.Read.$fReadInt3
                   GHC.Read.$fReadInt_$sconvertInt
                   Text.ParserCombinators.ReadPrec.minPrec
                   @ GHC.Types.Int
                   (Text.Read.readEither5 @ GHC.Types.Int)) -}
e8305fa076f12764e372d41b26c83cd0
  solve_go :: GHC.Prim.Int# -> Data.Monoid.First GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U> -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

