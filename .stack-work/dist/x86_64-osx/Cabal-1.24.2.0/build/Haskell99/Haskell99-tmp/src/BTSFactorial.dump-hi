
==================== FINAL INTERFACE ====================
2017-12-30 20:06:25.65268 UTC

interface main@main:BTSFactorial 8002
  interface hash: 9876e8a543998e289988b7105d053158
  ABI hash: 84a535de938a27dea1bbc06d65a607b9
  export-list hash: 417a29e3c6a7671decf6ac120166d758
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: e8391dde344b558bbf052293f5ecc872
  sig of: Nothing
  used TH splices: False
  where
exports:
  BTSFactorial.solve
module dependencies:
package dependencies: base-4.9.1.0* ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Either base-4.9.1.0:Data.Functor.Const
                         base-4.9.1.0:Data.Monoid base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:GHC.Generics base-4.9.1.0:GHC.IO.Exception
                         base-4.9.1.0:GHC.TypeLits
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.Num 00bfaa7b2f9d6084913c0697a8a49ec8
import  -/  base-4.9.1.0:GHC.Show a027f5ac24879eaba752f44aa90fe511
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  base-4.9.1.0:Text.Read 75c59863e882ebaec4532e9465e2ee9b
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
2b2b77e2efcbe62c851481ca70a9e92e
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   BTSFactorial.$trModule2
                   BTSFactorial.$trModule1) -}
655127360102db21f9ce2598738bf2ed
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "BTSFactorial"#) -}
b2cccb144789c8f38366a259fa4251cc
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "main"#) -}
5d77c8767fb808cd94f9593bc67479a5
  $wcalculateResultInt ::
    GHC.Prim.Int# -> GHC.Types.Int -> GHC.Types.Int
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><L,U(U)>,
     Inline: [0] -}
30b70c10bae1d51d06835c0835a68cd2
  $wsolve ::
    GHC.Base.String -> (# GHC.Types.Char, [GHC.Types.Char] #)
  {- Arity: 1, Strictness: <L,U>, Inline: [0],
     Unfolding: (\ (w :: GHC.Base.String) ->
                 case Text.Read.readEither6
                        @ GHC.Types.Int
                        (Text.ParserCombinators.ReadP.run
                           @ GHC.Types.Int
                           BTSFactorial.solve4
                           w) of wild {
                   []
                   -> case BTSFactorial.solve3
                      ret_ty (# GHC.Types.Char, [GHC.Types.Char] #)
                      of {}
                   : x ds
                   -> case ds of wild1 {
                        []
                        -> case x of ww { GHC.Types.I# ww1 ->
                           case BTSFactorial.$wcalculateResultInt
                                  ww1
                                  BTSFactorial.solve2 of ww2 { GHC.Types.I# ww3 ->
                           GHC.Show.$wshowSignedInt 0# ww3 (GHC.Types.[] @ GHC.Types.Char) } }
                        : ipv ipv1
                        -> case BTSFactorial.solve1
                           ret_ty (# GHC.Types.Char, [GHC.Types.Char] #)
                           of {} } }) -}
23f524bf20a26fe76fa980df5c967a63
  solve :: GHC.Base.String -> GHC.Base.String
  {- Arity: 1, Strictness: <L,U>m2, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: GHC.Base.String) ->
                 case BTSFactorial.$wsolve w of ww { (#,#) ww1 ww2 ->
                 GHC.Types.: @ GHC.Types.Char ww1 ww2 }) -}
37e835b619cbd58661f540fb1dc96c37
  solve1 :: GHC.Types.Int
  {- Strictness: x -}
e45e9c940f32826dcfa9a79034ff26f7
  solve2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
b411f376fcf8d870122f65afaa70c59f
  solve3 :: GHC.Types.Int
  {- Strictness: x -}
acd427b52d43ac25702b8c3b0392e9ad
  solve4 :: Text.ParserCombinators.ReadP.P GHC.Types.Int
  {- Unfolding: (GHC.Read.$fReadInt3
                   GHC.Read.$fReadInt_$sconvertInt
                   Text.ParserCombinators.ReadPrec.minPrec
                   @ GHC.Types.Int
                   (Text.Read.readEither5 @ GHC.Types.Int)) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

