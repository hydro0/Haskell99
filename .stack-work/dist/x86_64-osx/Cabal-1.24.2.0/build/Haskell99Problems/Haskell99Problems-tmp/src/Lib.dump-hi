
==================== FINAL INTERFACE ====================
2017-10-29 09:22:47.799454 UTC

interface main@main:Lib 8002
  interface hash: c9b8b69a2edef469ff19410da2de4ad8
  ABI hash: f2fd7ea44097710742d4ffed01929993
  export-list hash: 4e7db0725c0deb5b92b8226eb2a36ea4
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 0a532b4805f043c4d6e7ff9cb83f5883
  sig of: Nothing
  used TH splices: False
  where
exports:
  Lib.someFunc
module dependencies:
package dependencies: array-0.5.1.1@array-0.5.1.1 base-4.9.1.0*
                      deepseq-1.4.2.0@deepseq-1.4.2.0 ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1 random-1.1@random-1.1-9tceXaeYIMZ4JrKq20Egog*
                      time-1.6.0.1@time-1.6.0.1
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         time-1.6.0.1@time-1.6.0.1:Data.Time.Calendar.Gregorian
         time-1.6.0.1@time-1.6.0.1:Data.Time.Format.Parse
         time-1.6.0.1@time-1.6.0.1:Data.Time.LocalTime.LocalTime
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Complex base-4.9.1.0:Data.Either
                         base-4.9.1.0:Data.Functor.Const base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
import  -/  base-4.9.1.0:Data.Foldable 3e0b6967a1da89945d0e2d47266337a2
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.Err 3bba35a16538d33d424682ce66876cdd
import  -/  base-4.9.1.0:GHC.List ab8c4e523e6c479c549d3bcd5fc4a439
import  -/  base-4.9.1.0:GHC.Num 00bfaa7b2f9d6084913c0697a8a49ec8
import  -/  base-4.9.1.0:GHC.Show a027f5ac24879eaba752f44aa90fe511
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  base-4.9.1.0:System.IO c9de64c5f5407c4cf1c52500c4d15200
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  ghc-prim-0.5.0.0:GHC.Types 89f8de4f08018c9177c98d979eae0e45
import  -/  random-1.1@random-1.1-9tceXaeYIMZ4JrKq20Egog:System.Random cc3ef358c669b194cf9fe94db6f2430f
0cdba472ab1f83f7304867086ec78ff7
  $fShowExt :: GHC.Show.Show a => GHC.Show.Show (Lib.Ext a)
  DFunId
  {- Arity: 1, Strictness: <L,U(C(C1(U)),A,A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a ($dShow :: GHC.Show.Show a).
                  @ (Lib.Ext a)
                  (Lib.$fShowExt_$cshowsPrec @ a $dShow)
                  (Lib.$fShowExt_$cshow @ a $dShow)
                  (Lib.$fShowExt_$cshowList @ a $dShow) -}
f651854960ec57f45a41279601e2dfa0
  $fShowExt1 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
51541799c70a751cf185c862103aaa15
  $fShowExt2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Single "#) -}
a39c9b94e6da3ea159d11ddf4b1b1497
  $fShowExt3 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 11#) -}
75ce5441e1bc4f4c209914d791eba713
  $fShowExt4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Multiple "#) -}
71faa51c6dcc07f0c6ebb6af249eaea0
  $fShowExt5 :: [GHC.Types.Char]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   GHC.Show.shows4
                   (GHC.Types.[] @ GHC.Types.Char)) -}
0cdba472ab1f83f7304867086ec78ff7
  $fShowExt_$cshow :: GHC.Show.Show a => Lib.Ext a -> GHC.Base.String
  {- Arity: 2, Strictness: <L,1*U(1*C1(C1(U)),A,A)><S,1*U>,
     Unfolding: (\ @ a ($dShow :: GHC.Show.Show a) (x :: Lib.Ext a) ->
                 case x of wild {
                   Lib.Multiple b1
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Lib.$fShowExt4
                        (case b1 of ww { (,) ww1 ww2 ->
                         GHC.Types.:
                           @ GHC.Types.Char
                           GHC.Show.shows7
                           (case ww1 of ww4 { GHC.Types.I# ww3 ->
                            case GHC.Show.$wshowSignedInt
                                   0#
                                   ww3
                                   (GHC.Types.:
                                      @ GHC.Types.Char
                                      GHC.Show.shows5
                                      (GHC.Show.$fShow(,)_$sgo
                                         Lib.$fShowExt5
                                         (GHC.Show.showsPrec @ a $dShow GHC.Show.shows22 ww2)
                                         (GHC.Types.[] @ GHC.Show.ShowS))) of ww5 { (#,#) ww6 ww7 ->
                            GHC.Types.: @ GHC.Types.Char ww6 ww7 } }) })
                   Lib.Single b1
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Lib.$fShowExt2
                        (GHC.Show.showsPrec
                           @ a
                           $dShow
                           Lib.$fShowExt3
                           b1
                           (GHC.Types.[] @ GHC.Types.Char)) }) -}
0cdba472ab1f83f7304867086ec78ff7
  $fShowExt_$cshowList ::
    GHC.Show.Show a => [Lib.Ext a] -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(C(C1(U)),A,A)><S,1*U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   ($dShow :: GHC.Show.Show a)
                   (eta :: [Lib.Ext a])
                   (eta1 :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Lib.Ext a)
                   (Lib.$fShowExt_$cshowsPrec @ a $dShow Lib.$fShowExt1)
                   eta
                   eta1) -}
0cdba472ab1f83f7304867086ec78ff7
  $fShowExt_$cshowsPrec ::
    GHC.Show.Show a => GHC.Types.Int -> Lib.Ext a -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(C(C1(U)),A,A)><S(S),1*U(U)><S,1*U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   (w :: GHC.Show.Show a)
                   (w1 :: GHC.Types.Int)
                   (w2 :: Lib.Ext a) ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 Lib.$w$cshowsPrec @ a w ww1 w2 }) -}
9b4cffb387ca35172dc80070a76062eb
  $tc'Elem :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7183669021920636835##
                   7973889407322488050##
                   Lib.$trModule
                   Lib.$tc'Elem1) -}
4eac440980242b6e9a506dc84b537e82
  $tc'Elem1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Elem"#) -}
78515325aabc57de6e164bf316f55b6b
  $tc'List :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13622476506685728127##
                   3603952611785546166##
                   Lib.$trModule
                   Lib.$tc'List1) -}
3291020c881519b71123f7cfb7398a50
  $tc'List1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'List"#) -}
306117c3d0d7e0e35a1cf52e05f1f940
  $tc'Multiple :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2239191266677744655##
                   5191593196858650938##
                   Lib.$trModule
                   Lib.$tc'Multiple1) -}
f5b0bbf46cc37ff8915e055730a16c0a
  $tc'Multiple1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Multiple"#) -}
ff7267ec0042b617b1ba65e1b20ccff7
  $tc'Single :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14233019872433089124##
                   11784479713759429356##
                   Lib.$trModule
                   Lib.$tc'Single1) -}
a844cf91aa30c111f5a886e79ae7656f
  $tc'Single1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Single"#) -}
8993aee7143460bf27ffb1912552bac4
  $tcExt :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12102507709481457601##
                   7273772690122159686##
                   Lib.$trModule
                   Lib.$tcExt1) -}
87610330e3110fd7cd5847727a8d9c6f
  $tcExt1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Ext"#) -}
c7bfa6fe8f4c9c3a2d398e91994232f4
  $tcNestedList :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12704955654791792007##
                   8508531976627511545##
                   Lib.$trModule
                   Lib.$tcNestedList1) -}
db2c167c63b95db21f635c1db8f15901
  $tcNestedList1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "NestedList"#) -}
002630a88586ceff500905606a8cfd5b
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Lib.$trModule2 Lib.$trModule1) -}
b850fb08f2371c4e1a1c03868bb0842a
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Lib"#) -}
cd16d71ff4b0d2f05b90689ba58baa61
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "main"#) -}
0cdba472ab1f83f7304867086ec78ff7
  $w$cshowsPrec ::
    GHC.Show.Show a => GHC.Prim.Int# -> Lib.Ext a -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(C(C1(U)),A,A)><S,U><S,1*U>,
     Inline: [0],
     Unfolding: (\ @ a
                   (w :: GHC.Show.Show a)
                   (ww :: GHC.Prim.Int#)
                   (w1 :: Lib.Ext a) ->
                 case w1 of wild {
                   Lib.Multiple b1
                   -> let {
                        p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                        = \ (x :: GHC.Base.String) ->
                          GHC.Base.++
                            @ GHC.Types.Char
                            Lib.$fShowExt4
                            (case b1 of ww1 { (,) ww2 ww3 ->
                             GHC.Types.:
                               @ GHC.Types.Char
                               GHC.Show.shows7
                               (case ww2 of ww4 { GHC.Types.I# ww5 ->
                                case GHC.Show.$wshowSignedInt
                                       0#
                                       ww5
                                       (GHC.Types.:
                                          @ GHC.Types.Char
                                          GHC.Show.shows5
                                          (GHC.Show.$fShow(,)_$sgo
                                             (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 x)
                                             (GHC.Show.showsPrec @ a w GHC.Show.shows22 ww3)
                                             (GHC.Types.[]
                                                @ GHC.Show.ShowS))) of ww6 { (#,#) ww7 ww8 ->
                                GHC.Types.: @ GHC.Types.Char ww7 ww8 } }) })
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# ww 11#) of wild1 {
                        GHC.Types.False -> p
                        GHC.Types.True
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows7
                             (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 x)) }
                   Lib.Single b1
                   -> let {
                        g :: GHC.Base.String -> GHC.Base.String
                        = GHC.Show.showsPrec @ a w Lib.$fShowExt3 b1
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# ww 11#) of wild1 {
                        GHC.Types.False
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Base.++ @ GHC.Types.Char Lib.$fShowExt2 (g x)
                        GHC.Types.True
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows7
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Lib.$fShowExt2
                                (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 x))) } }) -}
fddb6f92a51c10561216ca9a35289b12
  $wrange ::
    GHC.Prim.Int#
    -> GHC.Prim.Int# -> (# GHC.Types.Int, [GHC.Types.Int] #)
  {- Arity: 2, Strictness: <S,U><S,U>, Inline: [0] -}
0cdba472ab1f83f7304867086ec78ff7
  data Ext a = Multiple (GHC.Types.Int, a) | Single a
44438808b359522da9b27c02d2da6656
  data NestedList a = Elem a | List [Lib.NestedList a]
c5b94e5cb741ec3c8496b153dc36a3f6
  someFunc :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Lib.someFunc1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
dbcb1bbaf17077bc996d9fd7f5e78ee3
  someFunc1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (eta :: GHC.Prim.State#
                             GHC.Prim.RealWorld)[OneShot] ->
                 GHC.IO.Handle.Text.hPutStr2
                   GHC.IO.Handle.FD.stdout
                   Lib.someFunc2
                   GHC.Types.True
                   eta) -}
a05aa77a1f9e7c1826981989bbbcc1db
  someFunc2 :: GHC.Base.String
  {- Unfolding: (case Lib.$wrange 5# 12# of ww { (#,#) ww1 ww2 ->
                 GHC.Types.:
                   @ GHC.Types.Char
                   GHC.Show.showList__2
                   (case ww1 of ww3 { GHC.Types.I# ww4 ->
                    case GHC.Show.$wshowSignedInt
                           0#
                           ww4
                           (Lib.someFunc_showl ww2) of ww5 { (#,#) ww6 ww7 ->
                    GHC.Types.: @ GHC.Types.Char ww6 ww7 } }) }) -}
0d5ffac99e5b53b4e7bb54009953cb06
  someFunc_showl :: [GHC.Types.Int] -> GHC.Base.String
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
instance [safe] GHC.Show.Show [Lib.Ext] = Lib.$fShowExt
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

